/*
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketcheck.cars.api.client.api;

import marketcheck.cars.api.client.ApiException;
import marketcheck.cars.api..client.model.Error;
import marketcheck.cars.api..client.model.Listing;
import marketcheck.cars.api..client.model.ListingExtraAttributes;
import marketcheck.cars.api..client.model.ListingMedia;
import marketcheck.cars.api..client.model.ListingVDP;
import marketcheck.cars.api..client.model.SearchResponse;
import marketcheck.cars.api..client.model.VinReport;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ListingsApi
 */
@Ignore
public class ListingsApiTest {

    private final ListingsApi api = new ListingsApi();

    
    /**
     * Listing by id
     *
     * Get a particular listing by its id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListingTest() throws ApiException {
        String id = null;
        String apiKey = null;
        Listing response = api.getListing(id, apiKey);

        // TODO: test validations
    }
    
    /**
     * Long text Listings attributes for Listing with the given id
     *
     * Get listing options, features, seller comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListingExtraTest() throws ApiException {
        String id = null;
        String apiKey = null;
        ListingExtraAttributes response = api.getListingExtra(id, apiKey);

        // TODO: test validations
    }
    
    /**
     * Listing media by id
     *
     * Get listing media (photo, photos) by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListingMediaTest() throws ApiException {
        String id = null;
        String apiKey = null;
        ListingMedia response = api.getListingMedia(id, apiKey);

        // TODO: test validations
    }
    
    /**
     * Get listing HTML
     *
     * Cached HTML of the Vehicle Details Page (VDP) for the listing. The HTML is cached only for 7 days for all listings. So this API could be used to get HTML of mostly active listings and that have recently expired
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListingVDPTest() throws ApiException {
        String id = null;
        String apiKey = null;
        String html = null;
        ListingVDP response = api.getListingVDP(id, apiKey, html);

        // TODO: test validations
    }
    
    /**
     * Get Summary Report
     *
     * [MOCK] Generate Summary report
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSummaryReportTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        List<VinReport> response = api.getSummaryReport(vin, apiKey);

        // TODO: test validations
    }
    
    /**
     * Gets active car listings for the given search criteria
     *
     * This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 1000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom/msrp for your search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String apiKey = null;
        Double latitude = null;
        Double longitude = null;
        Integer radius = null;
        String carType = null;
        String sellerType = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String dealerId = null;
        String vin = null;
        String source = null;
        String bodyType = null;
        String bodySubtype = null;
        String vehicleType = null;
        String vins = null;
        String taxonomyVins = null;
        String ymmt = null;
        String match = null;
        String cylinders = null;
        String transmission = null;
        String speeds = null;
        String doors = null;
        String drivetrain = null;
        String exteriorColor = null;
        String interiorColor = null;
        String engine = null;
        String engineType = null;
        String engineAspiration = null;
        String engineBlock = null;
        String milesRange = null;
        String priceRange = null;
        String domRange = null;
        String sortBy = null;
        String sortOrder = null;
        Integer rows = null;
        Integer start = null;
        String facets = null;
        String stats = null;
        String country = null;
        String plot = null;
        String nodedup = null;
        String state = null;
        String city = null;
        String dealerName = null;
        String trimO = null;
        String trimR = null;
        String domActiveRange = null;
        String dom180Range = null;
        String options = null;
        String features = null;
        SearchResponse response = api.search(apiKey, latitude, longitude, radius, carType, sellerType, year, make, model, trim, dealerId, vin, source, bodyType, bodySubtype, vehicleType, vins, taxonomyVins, ymmt, match, cylinders, transmission, speeds, doors, drivetrain, exteriorColor, interiorColor, engine, engineType, engineAspiration, engineBlock, milesRange, priceRange, domRange, sortBy, sortOrder, rows, start, facets, stats, country, plot, nodedup, state, city, dealerName, trimO, trimR, domActiveRange, dom180Range, options, features);

        // TODO: test validations
    }
    
}
