/*
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketcheck.cars.api.client.api;

import marketcheck.cars.api.client.ApiException;
import marketcheck.cars.api..client.model.Averages;
import marketcheck.cars.api..client.model.ComparisonPoint;
import marketcheck.cars.api..client.model.CompetitorsPoint;
import marketcheck.cars.api..client.model.DepreciationPoint;
import marketcheck.cars.api..client.model.Error;
import marketcheck.cars.api..client.model.Mds;
import marketcheck.cars.api..client.model.PopularityItem;
import marketcheck.cars.api..client.model.TrendPoint;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MarketApi
 */
@Ignore
public class MarketApiTest {

    private final MarketApi api = new MarketApi();

    
    /**
     * [MOCK] Get Averages for YMM
     *
     * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAveragesTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String fields = null;
        Averages response = api.getAverages(vin, apiKey, year, make, model, trim, fields);

        // TODO: test validations
    }
    
    /**
     * Compare market
     *
     * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComparisonTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        ComparisonPoint response = api.getComparison(vin, apiKey);

        // TODO: test validations
    }
    
    /**
     * Competitors
     *
     * [MOCK] Competitor cars in market for current vin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompetitionTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        CompetitorsPoint response = api.getCompetition(vin, apiKey);

        // TODO: test validations
    }
    
    /**
     * Depreciation
     *
     * [MOCK] Model resale value based on depreciation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepreciationTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        DepreciationPoint response = api.getDepreciation(vin, apiKey);

        // TODO: test validations
    }
    
    /**
     * Market Days Supply
     *
     * Get the basic information on specifications for a car identified by a valid VIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMDSTest() throws ApiException {
        String vin = null;
        String apiKey = null;
        String exact = null;
        Double latitude = null;
        Double longitude = null;
        Integer radius = null;
        String debug = null;
        String includeSold = null;
        Mds response = api.getMDS(vin, apiKey, exact, latitude, longitude, radius, debug, includeSold);

        // TODO: test validations
    }
    
    /**
     * Popularity
     *
     * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPopularityTest() throws ApiException {
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        String bodyType = null;
        String apiKey = null;
        String stats = null;
        List<PopularityItem> response = api.getPopularity(year, make, model, trim, bodyType, apiKey, stats);

        // TODO: test validations
    }
    
    /**
     * Get Trends for criteria
     *
     * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrendsTest() throws ApiException {
        String vin = null;
        String carType = null;
        String apiKey = null;
        String year = null;
        String make = null;
        String model = null;
        String trim = null;
        List<TrendPoint> response = api.getTrends(vin, carType, apiKey, year, make, model, trim);

        // TODO: test validations
    }
    
}
