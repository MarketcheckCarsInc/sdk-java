/*
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketcheck.cars.api.client.api;

import marketcheck.cars.api.client.ApiCallback;
import marketcheck.cars.api.client.ApiClient;
import marketcheck.cars.api.client.ApiException;
import marketcheck.cars.api.client.ApiResponse;
import marketcheck.cars.api.client.Configuration;
import marketcheck.cars.api.client.Pair;
import marketcheck.cars.api.client.ProgressRequestBody;
import marketcheck.cars.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import marketcheck.cars.api..client.model.Build;
import marketcheck.cars.api..client.model.Economy;
import marketcheck.cars.api..client.model.Error;
import marketcheck.cars.api..client.model.FuelEfficiency;
import marketcheck.cars.api..client.model.SafetyRating;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VinDecoderApi {
    private ApiClient apiClient;

    public VinDecoderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VinDecoderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for decode
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call decodeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vin/{vin}/specs"
            .replaceAll("\\{" + "vin" + "\\}", apiClient.escapeString(vin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call decodeValidateBeforeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling decode(Async)");
        }
        

        com.squareup.okhttp.Call call = decodeCall(vin, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Build decode(String vin, String apiKey) throws ApiException {
        ApiResponse<Build> resp = decodeWithHttpInfo(vin, apiKey);
        return resp.getData();
    }

    /**
     * VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Build> decodeWithHttpInfo(String vin, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = decodeValidateBeforeCall(vin, apiKey, null, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * VIN Decoder (asynchronously)
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call decodeAsync(String vin, String apiKey, final ApiCallback<Build> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = decodeValidateBeforeCall(vin, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEconomy
     * @param vin VIN as a reference to the type of car for which Environmental Economy data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEconomyCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/economy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEconomyValidateBeforeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getEconomy(Async)");
        }
        

        com.squareup.okhttp.Call call = getEconomyCall(vin, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Economy based on environmental factors
     * [MOCK] Calculate Economy i.e. Environmental Friendliness
     * @param vin VIN as a reference to the type of car for which Environmental Economy data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return Economy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Economy getEconomy(String vin, String apiKey) throws ApiException {
        ApiResponse<Economy> resp = getEconomyWithHttpInfo(vin, apiKey);
        return resp.getData();
    }

    /**
     * Get Economy based on environmental factors
     * [MOCK] Calculate Economy i.e. Environmental Friendliness
     * @param vin VIN as a reference to the type of car for which Environmental Economy data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;Economy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Economy> getEconomyWithHttpInfo(String vin, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getEconomyValidateBeforeCall(vin, apiKey, null, null);
        Type localVarReturnType = new TypeToken<Economy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Economy based on environmental factors (asynchronously)
     * [MOCK] Calculate Economy i.e. Environmental Friendliness
     * @param vin VIN as a reference to the type of car for which Environmental Economy data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEconomyAsync(String vin, String apiKey, final ApiCallback<Economy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEconomyValidateBeforeCall(vin, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Economy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEfficiency
     * @param vin VIN as a reference to the type of car for which fuel data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEfficiencyCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fuel_efficiency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEfficiencyValidateBeforeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getEfficiency(Async)");
        }
        

        com.squareup.okhttp.Call call = getEfficiencyCall(vin, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get fuel effeciency
     * [MOCK] Calculate fuel efficiency from taxonomy db mileage values
     * @param vin VIN as a reference to the type of car for which fuel data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return FuelEfficiency
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuelEfficiency getEfficiency(String vin, String apiKey) throws ApiException {
        ApiResponse<FuelEfficiency> resp = getEfficiencyWithHttpInfo(vin, apiKey);
        return resp.getData();
    }

    /**
     * Get fuel effeciency
     * [MOCK] Calculate fuel efficiency from taxonomy db mileage values
     * @param vin VIN as a reference to the type of car for which fuel data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;FuelEfficiency&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuelEfficiency> getEfficiencyWithHttpInfo(String vin, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getEfficiencyValidateBeforeCall(vin, apiKey, null, null);
        Type localVarReturnType = new TypeToken<FuelEfficiency>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fuel effeciency (asynchronously)
     * [MOCK] Calculate fuel efficiency from taxonomy db mileage values
     * @param vin VIN as a reference to the type of car for which fuel data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEfficiencyAsync(String vin, String apiKey, final ApiCallback<FuelEfficiency> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEfficiencyValidateBeforeCall(vin, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuelEfficiency>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSafetyRating
     * @param vin VIN to fetch the safety ratings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSafetyRatingCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/safety";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSafetyRatingValidateBeforeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getSafetyRating(Async)");
        }
        

        com.squareup.okhttp.Call call = getSafetyRatingCall(vin, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Safety Rating
     * [MOCK] Get Safety ratings from third party sources
     * @param vin VIN to fetch the safety ratings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return SafetyRating
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SafetyRating getSafetyRating(String vin, String apiKey) throws ApiException {
        ApiResponse<SafetyRating> resp = getSafetyRatingWithHttpInfo(vin, apiKey);
        return resp.getData();
    }

    /**
     * Get Safety Rating
     * [MOCK] Get Safety ratings from third party sources
     * @param vin VIN to fetch the safety ratings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;SafetyRating&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SafetyRating> getSafetyRatingWithHttpInfo(String vin, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getSafetyRatingValidateBeforeCall(vin, apiKey, null, null);
        Type localVarReturnType = new TypeToken<SafetyRating>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Safety Rating (asynchronously)
     * [MOCK] Get Safety ratings from third party sources
     * @param vin VIN to fetch the safety ratings (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSafetyRatingAsync(String vin, String apiKey, final ApiCallback<SafetyRating> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSafetyRatingValidateBeforeCall(vin, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SafetyRating>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
