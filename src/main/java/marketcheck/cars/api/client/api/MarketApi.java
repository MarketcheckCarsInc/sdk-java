/*
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketcheck.cars.api.client.api;

import marketcheck.cars.api.client.ApiCallback;
import marketcheck.cars.api.client.ApiClient;
import marketcheck.cars.api.client.ApiException;
import marketcheck.cars.api.client.ApiResponse;
import marketcheck.cars.api.client.Configuration;
import marketcheck.cars.api.client.Pair;
import marketcheck.cars.api.client.ProgressRequestBody;
import marketcheck.cars.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import marketcheck.cars.api..client.model.Averages;
import marketcheck.cars.api..client.model.ComparisonPoint;
import marketcheck.cars.api..client.model.CompetitorsPoint;
import marketcheck.cars.api..client.model.DepreciationPoint;
import marketcheck.cars.api..client.model.Error;
import marketcheck.cars.api..client.model.Mds;
import marketcheck.cars.api..client.model.PopularityItem;
import marketcheck.cars.api..client.model.TrendPoint;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketApi {
    private ApiClient apiClient;

    public MarketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAverages
     * @param vin VIN as a reference to the type of car for which averages data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAveragesCall(String vin, String apiKey, String year, String make, String model, String trim, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/averages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (make != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("make", make));
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("model", model));
        if (trim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trim", trim));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAveragesValidateBeforeCall(String vin, String apiKey, String year, String make, String model, String trim, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getAverages(Async)");
        }
        

        com.squareup.okhttp.Call call = getAveragesCall(vin, apiKey, year, make, model, trim, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [MOCK] Get Averages for YMM
     * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which averages data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market) (optional)
     * @return Averages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Averages getAverages(String vin, String apiKey, String year, String make, String model, String trim, String fields) throws ApiException {
        ApiResponse<Averages> resp = getAveragesWithHttpInfo(vin, apiKey, year, make, model, trim, fields);
        return resp.getData();
    }

    /**
     * [MOCK] Get Averages for YMM
     * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which averages data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market) (optional)
     * @return ApiResponse&lt;Averages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Averages> getAveragesWithHttpInfo(String vin, String apiKey, String year, String make, String model, String trim, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAveragesValidateBeforeCall(vin, apiKey, year, make, model, trim, fields, null, null);
        Type localVarReturnType = new TypeToken<Averages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [MOCK] Get Averages for YMM (asynchronously)
     * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which averages data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAveragesAsync(String vin, String apiKey, String year, String make, String model, String trim, String fields, final ApiCallback<Averages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAveragesValidateBeforeCall(vin, apiKey, year, make, model, trim, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Averages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComparison
     * @param vin VIN as a reference to the type of car for which comparison data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComparisonCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comparison";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComparisonValidateBeforeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getComparison(Async)");
        }
        

        com.squareup.okhttp.Call call = getComparisonCall(vin, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Compare market
     * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which comparison data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ComparisonPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComparisonPoint getComparison(String vin, String apiKey) throws ApiException {
        ApiResponse<ComparisonPoint> resp = getComparisonWithHttpInfo(vin, apiKey);
        return resp.getData();
    }

    /**
     * Compare market
     * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which comparison data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;ComparisonPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComparisonPoint> getComparisonWithHttpInfo(String vin, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getComparisonValidateBeforeCall(vin, apiKey, null, null);
        Type localVarReturnType = new TypeToken<ComparisonPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Compare market (asynchronously)
     * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which comparison data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComparisonAsync(String vin, String apiKey, final ApiCallback<ComparisonPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComparisonValidateBeforeCall(vin, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComparisonPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCompetition
     * @param vin VIN as a reference to the type of car for which competitors data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompetitionCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/competition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompetitionValidateBeforeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getCompetition(Async)");
        }
        

        com.squareup.okhttp.Call call = getCompetitionCall(vin, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Competitors
     * [MOCK] Competitor cars in market for current vin
     * @param vin VIN as a reference to the type of car for which competitors data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return CompetitorsPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompetitorsPoint getCompetition(String vin, String apiKey) throws ApiException {
        ApiResponse<CompetitorsPoint> resp = getCompetitionWithHttpInfo(vin, apiKey);
        return resp.getData();
    }

    /**
     * Competitors
     * [MOCK] Competitor cars in market for current vin
     * @param vin VIN as a reference to the type of car for which competitors data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;CompetitorsPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompetitorsPoint> getCompetitionWithHttpInfo(String vin, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getCompetitionValidateBeforeCall(vin, apiKey, null, null);
        Type localVarReturnType = new TypeToken<CompetitorsPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Competitors (asynchronously)
     * [MOCK] Competitor cars in market for current vin
     * @param vin VIN as a reference to the type of car for which competitors data is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompetitionAsync(String vin, String apiKey, final ApiCallback<CompetitorsPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompetitionValidateBeforeCall(vin, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompetitorsPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDepreciation
     * @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDepreciationCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/depreciation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDepreciationValidateBeforeCall(String vin, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getDepreciation(Async)");
        }
        

        com.squareup.okhttp.Call call = getDepreciationCall(vin, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Depreciation
     * [MOCK] Model resale value based on depreciation
     * @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return DepreciationPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepreciationPoint getDepreciation(String vin, String apiKey) throws ApiException {
        ApiResponse<DepreciationPoint> resp = getDepreciationWithHttpInfo(vin, apiKey);
        return resp.getData();
    }

    /**
     * Depreciation
     * [MOCK] Model resale value based on depreciation
     * @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;DepreciationPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepreciationPoint> getDepreciationWithHttpInfo(String vin, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getDepreciationValidateBeforeCall(vin, apiKey, null, null);
        Type localVarReturnType = new TypeToken<DepreciationPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Depreciation (asynchronously)
     * [MOCK] Model resale value based on depreciation
     * @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDepreciationAsync(String vin, String apiKey, final ApiCallback<DepreciationPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDepreciationValidateBeforeCall(vin, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepreciationPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMDS
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param exact Exact parameter (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (optional)
     * @param debug Debug parameter (optional)
     * @param includeSold To fetch sold vins (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMDSCall(String vin, String apiKey, String exact, Double latitude, Double longitude, Integer radius, String debug, String includeSold, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));
        if (exact != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exact", exact));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("latitude", latitude));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("longitude", longitude));
        if (radius != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("radius", radius));
        if (debug != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("debug", debug));
        if (includeSold != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_sold", includeSold));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMDSValidateBeforeCall(String vin, String apiKey, String exact, Double latitude, Double longitude, Integer radius, String debug, String includeSold, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getMDS(Async)");
        }
        

        com.squareup.okhttp.Call call = getMDSCall(vin, apiKey, exact, latitude, longitude, radius, debug, includeSold, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Market Days Supply
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param exact Exact parameter (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (optional)
     * @param debug Debug parameter (optional)
     * @param includeSold To fetch sold vins (optional)
     * @return Mds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Mds getMDS(String vin, String apiKey, String exact, Double latitude, Double longitude, Integer radius, String debug, String includeSold) throws ApiException {
        ApiResponse<Mds> resp = getMDSWithHttpInfo(vin, apiKey, exact, latitude, longitude, radius, debug, includeSold);
        return resp.getData();
    }

    /**
     * Market Days Supply
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param exact Exact parameter (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (optional)
     * @param debug Debug parameter (optional)
     * @param includeSold To fetch sold vins (optional)
     * @return ApiResponse&lt;Mds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Mds> getMDSWithHttpInfo(String vin, String apiKey, String exact, Double latitude, Double longitude, Integer radius, String debug, String includeSold) throws ApiException {
        com.squareup.okhttp.Call call = getMDSValidateBeforeCall(vin, apiKey, exact, latitude, longitude, radius, debug, includeSold, null, null);
        Type localVarReturnType = new TypeToken<Mds>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Market Days Supply (asynchronously)
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin VIN to decode (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param exact Exact parameter (optional)
     * @param latitude Latitude component of location (optional)
     * @param longitude Longitude component of location (optional)
     * @param radius Radius around the search location (optional)
     * @param debug Debug parameter (optional)
     * @param includeSold To fetch sold vins (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMDSAsync(String vin, String apiKey, String exact, Double latitude, Double longitude, Integer radius, String debug, String includeSold, final ApiCallback<Mds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMDSValidateBeforeCall(vin, apiKey, exact, latitude, longitude, radius, debug, includeSold, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Mds>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPopularity
     * @param year Year of the car (required)
     * @param make Make of the car (required)
     * @param model Model of the Car (required)
     * @param trim Trim of the Car (required)
     * @param bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPopularityCall(String year, String make, String model, String trim, String bodyType, String apiKey, String stats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/popularity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (make != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("make", make));
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("model", model));
        if (trim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trim", trim));
        if (bodyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("body_type", bodyType));
        if (stats != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stats", stats));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPopularityValidateBeforeCall(String year, String make, String model, String trim, String bodyType, String apiKey, String stats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getPopularity(Async)");
        }
        
        // verify the required parameter 'make' is set
        if (make == null) {
            throw new ApiException("Missing the required parameter 'make' when calling getPopularity(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling getPopularity(Async)");
        }
        
        // verify the required parameter 'trim' is set
        if (trim == null) {
            throw new ApiException("Missing the required parameter 'trim' when calling getPopularity(Async)");
        }
        
        // verify the required parameter 'bodyType' is set
        if (bodyType == null) {
            throw new ApiException("Missing the required parameter 'bodyType' when calling getPopularity(Async)");
        }
        

        com.squareup.okhttp.Call call = getPopularityCall(year, make, model, trim, bodyType, apiKey, stats, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Popularity
     * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
     * @param year Year of the car (required)
     * @param make Make of the car (required)
     * @param model Model of the Car (required)
     * @param trim Trim of the Car (required)
     * @param bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @return List&lt;PopularityItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PopularityItem> getPopularity(String year, String make, String model, String trim, String bodyType, String apiKey, String stats) throws ApiException {
        ApiResponse<List<PopularityItem>> resp = getPopularityWithHttpInfo(year, make, model, trim, bodyType, apiKey, stats);
        return resp.getData();
    }

    /**
     * Popularity
     * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
     * @param year Year of the car (required)
     * @param make Make of the car (required)
     * @param model Model of the Car (required)
     * @param trim Trim of the Car (required)
     * @param bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @return ApiResponse&lt;List&lt;PopularityItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PopularityItem>> getPopularityWithHttpInfo(String year, String make, String model, String trim, String bodyType, String apiKey, String stats) throws ApiException {
        com.squareup.okhttp.Call call = getPopularityValidateBeforeCall(year, make, model, trim, bodyType, apiKey, stats, null, null);
        Type localVarReturnType = new TypeToken<List<PopularityItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Popularity (asynchronously)
     * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
     * @param year Year of the car (required)
     * @param make Make of the car (required)
     * @param model Model of the Car (required)
     * @param trim Trim of the Car (required)
     * @param bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPopularityAsync(String year, String make, String model, String trim, String bodyType, String apiKey, String stats, final ApiCallback<List<PopularityItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPopularityValidateBeforeCall(year, make, model, trim, bodyType, apiKey, stats, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PopularityItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrends
     * @param vin VIN as a reference to the type of car for which trend data is to be returned (required)
     * @param carType Car type. Allowed values are - new / used / certified (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrendsCall(String vin, String carType, String apiKey, String year, String make, String model, String trim, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));
        if (carType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("car_type", carType));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (make != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("make", make));
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("model", model));
        if (trim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trim", trim));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrendsValidateBeforeCall(String vin, String carType, String apiKey, String year, String make, String model, String trim, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling getTrends(Async)");
        }
        
        // verify the required parameter 'carType' is set
        if (carType == null) {
            throw new ApiException("Missing the required parameter 'carType' when calling getTrends(Async)");
        }
        

        com.squareup.okhttp.Call call = getTrendsCall(vin, carType, apiKey, year, make, model, trim, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Trends for criteria
     * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which trend data is to be returned (required)
     * @param carType Car type. Allowed values are - new / used / certified (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @return List&lt;TrendPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrendPoint> getTrends(String vin, String carType, String apiKey, String year, String make, String model, String trim) throws ApiException {
        ApiResponse<List<TrendPoint>> resp = getTrendsWithHttpInfo(vin, carType, apiKey, year, make, model, trim);
        return resp.getData();
    }

    /**
     * Get Trends for criteria
     * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which trend data is to be returned (required)
     * @param carType Car type. Allowed values are - new / used / certified (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @return ApiResponse&lt;List&lt;TrendPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrendPoint>> getTrendsWithHttpInfo(String vin, String carType, String apiKey, String year, String make, String model, String trim) throws ApiException {
        com.squareup.okhttp.Call call = getTrendsValidateBeforeCall(vin, carType, apiKey, year, make, model, trim, null, null);
        Type localVarReturnType = new TypeToken<List<TrendPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Trends for criteria (asynchronously)
     * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which trend data is to be returned (required)
     * @param carType Car type. Allowed values are - new / used / certified (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrendsAsync(String vin, String carType, String apiKey, String year, String make, String model, String trim, final ApiCallback<List<TrendPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrendsValidateBeforeCall(vin, carType, apiKey, year, make, model, trim, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TrendPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
