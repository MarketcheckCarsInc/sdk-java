/*
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketcheck.cars.api.client.api;

import marketcheck.cars.api.client.ApiCallback;
import marketcheck.cars.api.client.ApiClient;
import marketcheck.cars.api.client.ApiException;
import marketcheck.cars.api.client.ApiResponse;
import marketcheck.cars.api.client.Configuration;
import marketcheck.cars.api.client.Pair;
import marketcheck.cars.api.client.ProgressRequestBody;
import marketcheck.cars.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import marketcheck.cars.api..client.model.Error;
import marketcheck.cars.api..client.model.PlotPoint;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GraphsApi {
    private ApiClient apiClient;

    public GraphsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GraphsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPriceMilesPlotData
     * @param carType Car type to get the scatter plot data for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN as a reference to the type of car for which plot data is to be returned (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param rows Number of results to return. Default is 1000. Max is 10000 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPriceMilesPlotDataCall(String carType, String apiKey, String vin, String year, String make, String model, String trim, Integer rows, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (vin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vin", vin));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("year", year));
        if (make != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("make", make));
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("model", model));
        if (trim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trim", trim));
        if (carType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("car_type", carType));
        if (rows != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rows", rows));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPriceMilesPlotDataValidateBeforeCall(String carType, String apiKey, String vin, String year, String make, String model, String trim, Integer rows, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'carType' is set
        if (carType == null) {
            throw new ApiException("Missing the required parameter 'carType' when calling getPriceMilesPlotData(Async)");
        }
        

        com.squareup.okhttp.Call call = getPriceMilesPlotDataCall(carType, apiKey, vin, year, make, model, trim, rows, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Price, Miles plots data for given criteria
     * [DEPRECIATED Please check this in /search API using plot&#x3D;true]Get price, miles plot data for active cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param carType Car type to get the scatter plot data for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN as a reference to the type of car for which plot data is to be returned (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param rows Number of results to return. Default is 1000. Max is 10000 (optional)
     * @return List&lt;PlotPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlotPoint> getPriceMilesPlotData(String carType, String apiKey, String vin, String year, String make, String model, String trim, Integer rows) throws ApiException {
        ApiResponse<List<PlotPoint>> resp = getPriceMilesPlotDataWithHttpInfo(carType, apiKey, vin, year, make, model, trim, rows);
        return resp.getData();
    }

    /**
     * Price, Miles plots data for given criteria
     * [DEPRECIATED Please check this in /search API using plot&#x3D;true]Get price, miles plot data for active cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param carType Car type to get the scatter plot data for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN as a reference to the type of car for which plot data is to be returned (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param rows Number of results to return. Default is 1000. Max is 10000 (optional)
     * @return ApiResponse&lt;List&lt;PlotPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlotPoint>> getPriceMilesPlotDataWithHttpInfo(String carType, String apiKey, String vin, String year, String make, String model, String trim, Integer rows) throws ApiException {
        com.squareup.okhttp.Call call = getPriceMilesPlotDataValidateBeforeCall(carType, apiKey, vin, year, make, model, trim, rows, null, null);
        Type localVarReturnType = new TypeToken<List<PlotPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Price, Miles plots data for given criteria (asynchronously)
     * [DEPRECIATED Please check this in /search API using plot&#x3D;true]Get price, miles plot data for active cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param carType Car type to get the scatter plot data for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param vin VIN as a reference to the type of car for which plot data is to be returned (optional)
     * @param year Year of the car (optional)
     * @param make Make of the car (optional)
     * @param model Model of the Car (optional)
     * @param trim Trim of the Car (optional)
     * @param rows Number of results to return. Default is 1000. Max is 10000 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPriceMilesPlotDataAsync(String carType, String apiKey, String vin, String year, String make, String model, String trim, Integer rows, final ApiCallback<List<PlotPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPriceMilesPlotDataValidateBeforeCall(carType, apiKey, vin, year, make, model, trim, rows, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PlotPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
