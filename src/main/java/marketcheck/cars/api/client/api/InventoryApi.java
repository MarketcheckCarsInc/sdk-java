/*
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketcheck.cars.api.client.api;

import marketcheck.cars.api.client.ApiCallback;
import marketcheck.cars.api.client.ApiClient;
import marketcheck.cars.api.client.ApiException;
import marketcheck.cars.api.client.ApiResponse;
import marketcheck.cars.api.client.Configuration;
import marketcheck.cars.api.client.Pair;
import marketcheck.cars.api.client.ProgressRequestBody;
import marketcheck.cars.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import marketcheck.cars.api..client.model.BaseListing;
import marketcheck.cars.api..client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryApi {
    private ApiClient apiClient;

    public InventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getDealerActiveInventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerActiveInventoryCall(String dealerId, String apiKey, Integer rows, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}/active/inventory"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (rows != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rows", rows));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerActiveInventoryValidateBeforeCall(String dealerId, String apiKey, Integer rows, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealerActiveInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerActiveInventoryCall(dealerId, apiKey, rows, start, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dealer inventory
     * Get a dealer&#39;s currently active inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @return BaseListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseListing getDealerActiveInventory(String dealerId, String apiKey, Integer rows, Integer start) throws ApiException {
        ApiResponse<BaseListing> resp = getDealerActiveInventoryWithHttpInfo(dealerId, apiKey, rows, start);
        return resp.getData();
    }

    /**
     * Dealer inventory
     * Get a dealer&#39;s currently active inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @return ApiResponse&lt;BaseListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseListing> getDealerActiveInventoryWithHttpInfo(String dealerId, String apiKey, Integer rows, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = getDealerActiveInventoryValidateBeforeCall(dealerId, apiKey, rows, start, null, null);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dealer inventory (asynchronously)
     * Get a dealer&#39;s currently active inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerActiveInventoryAsync(String dealerId, String apiKey, Integer rows, Integer start, final ApiCallback<BaseListing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerActiveInventoryValidateBeforeCall(dealerId, apiKey, rows, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDealerHistoricalInventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerHistoricalInventoryCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}/historical/inventory"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerHistoricalInventoryValidateBeforeCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealerHistoricalInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerHistoricalInventoryCall(dealerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dealer&#39;s historical inventory
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @return BaseListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseListing getDealerHistoricalInventory(String dealerId) throws ApiException {
        ApiResponse<BaseListing> resp = getDealerHistoricalInventoryWithHttpInfo(dealerId);
        return resp.getData();
    }

    /**
     * Dealer&#39;s historical inventory
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @return ApiResponse&lt;BaseListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseListing> getDealerHistoricalInventoryWithHttpInfo(String dealerId) throws ApiException {
        com.squareup.okhttp.Call call = getDealerHistoricalInventoryValidateBeforeCall(dealerId, null, null);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dealer&#39;s historical inventory (asynchronously)
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerHistoricalInventoryAsync(String dealerId, final ApiCallback<BaseListing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerHistoricalInventoryValidateBeforeCall(dealerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
