/*
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package marketcheck.cars.api.client.api;

import marketcheck.cars.api.client.ApiCallback;
import marketcheck.cars.api.client.ApiClient;
import marketcheck.cars.api.client.ApiException;
import marketcheck.cars.api.client.ApiResponse;
import marketcheck.cars.api.client.Configuration;
import marketcheck.cars.api.client.Pair;
import marketcheck.cars.api.client.ProgressRequestBody;
import marketcheck.cars.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import marketcheck.cars.api..client.model.BaseListing;
import marketcheck.cars.api..client.model.Dealer;
import marketcheck.cars.api..client.model.DealerLandingPage;
import marketcheck.cars.api..client.model.DealerRating;
import marketcheck.cars.api..client.model.DealerReview;
import marketcheck.cars.api..client.model.DealersResponse;
import marketcheck.cars.api..client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DealerApi {
    private ApiClient apiClient;

    public DealerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DealerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for dealerSearch
     * @param latitude Latitude component of location (required)
     * @param longitude Longitude component of location (required)
     * @param radius Radius around the search location (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Offset for the search results. Default is 1. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dealerSearchCall(Double latitude, Double longitude, Integer radius, String apiKey, Integer rows, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("latitude", latitude));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("longitude", longitude));
        if (radius != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("radius", radius));
        if (rows != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rows", rows));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dealerSearchValidateBeforeCall(Double latitude, Double longitude, Integer radius, String apiKey, Integer rows, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling dealerSearch(Async)");
        }
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling dealerSearch(Async)");
        }
        
        // verify the required parameter 'radius' is set
        if (radius == null) {
            throw new ApiException("Missing the required parameter 'radius' when calling dealerSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = dealerSearchCall(latitude, longitude, radius, apiKey, rows, start, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius. Max radius of only 50 miles is supported.
     * @param latitude Latitude component of location (required)
     * @param longitude Longitude component of location (required)
     * @param radius Radius around the search location (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Offset for the search results. Default is 1. (optional)
     * @return DealersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DealersResponse dealerSearch(Double latitude, Double longitude, Integer radius, String apiKey, Integer rows, Integer start) throws ApiException {
        ApiResponse<DealersResponse> resp = dealerSearchWithHttpInfo(latitude, longitude, radius, apiKey, rows, start);
        return resp.getData();
    }

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius. Max radius of only 50 miles is supported.
     * @param latitude Latitude component of location (required)
     * @param longitude Longitude component of location (required)
     * @param radius Radius around the search location (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Offset for the search results. Default is 1. (optional)
     * @return ApiResponse&lt;DealersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DealersResponse> dealerSearchWithHttpInfo(Double latitude, Double longitude, Integer radius, String apiKey, Integer rows, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = dealerSearchValidateBeforeCall(latitude, longitude, radius, apiKey, rows, start, null, null);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find car dealers around (asynchronously)
     * The dealers API returns a list of dealers around a given point and radius. Max radius of only 50 miles is supported.
     * @param latitude Latitude component of location (required)
     * @param longitude Longitude component of location (required)
     * @param radius Radius around the search location (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Offset for the search results. Default is 1. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dealerSearchAsync(Double latitude, Double longitude, Integer radius, String apiKey, Integer rows, Integer start, final ApiCallback<DealersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dealerSearchValidateBeforeCall(latitude, longitude, radius, apiKey, rows, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DealersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDealer
     * @param dealerId Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerCall(String dealerId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerValidateBeforeCall(String dealerId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealer(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerCall(dealerId, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param dealerId Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return Dealer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dealer getDealer(String dealerId, String apiKey) throws ApiException {
        ApiResponse<Dealer> resp = getDealerWithHttpInfo(dealerId, apiKey);
        return resp.getData();
    }

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param dealerId Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;Dealer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dealer> getDealerWithHttpInfo(String dealerId, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getDealerValidateBeforeCall(dealerId, apiKey, null, null);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dealer by id (asynchronously)
     * Get a particular dealer&#39;s information by its id
     * @param dealerId Dealer id to get all the dealer info attributes (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerAsync(String dealerId, String apiKey, final ApiCallback<Dealer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerValidateBeforeCall(dealerId, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dealer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDealerActiveInventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerActiveInventoryCall(String dealerId, String apiKey, Integer rows, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}/active/inventory"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (rows != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rows", rows));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerActiveInventoryValidateBeforeCall(String dealerId, String apiKey, Integer rows, Integer start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealerActiveInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerActiveInventoryCall(dealerId, apiKey, rows, start, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dealer inventory
     * Get a dealer&#39;s currently active inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @return BaseListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseListing getDealerActiveInventory(String dealerId, String apiKey, Integer rows, Integer start) throws ApiException {
        ApiResponse<BaseListing> resp = getDealerActiveInventoryWithHttpInfo(dealerId, apiKey, rows, start);
        return resp.getData();
    }

    /**
     * Dealer inventory
     * Get a dealer&#39;s currently active inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @return ApiResponse&lt;BaseListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseListing> getDealerActiveInventoryWithHttpInfo(String dealerId, String apiKey, Integer rows, Integer start) throws ApiException {
        com.squareup.okhttp.Call call = getDealerActiveInventoryValidateBeforeCall(dealerId, apiKey, rows, start, null, null);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dealer inventory (asynchronously)
     * Get a dealer&#39;s currently active inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param rows Number of results to return. Default is 10. Max is 50 (optional)
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerActiveInventoryAsync(String dealerId, String apiKey, Integer rows, Integer start, final ApiCallback<BaseListing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerActiveInventoryValidateBeforeCall(dealerId, apiKey, rows, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDealerHistoricalInventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerHistoricalInventoryCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}/historical/inventory"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerHistoricalInventoryValidateBeforeCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealerHistoricalInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerHistoricalInventoryCall(dealerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dealer&#39;s historical inventory
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @return BaseListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseListing getDealerHistoricalInventory(String dealerId) throws ApiException {
        ApiResponse<BaseListing> resp = getDealerHistoricalInventoryWithHttpInfo(dealerId);
        return resp.getData();
    }

    /**
     * Dealer&#39;s historical inventory
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @return ApiResponse&lt;BaseListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseListing> getDealerHistoricalInventoryWithHttpInfo(String dealerId) throws ApiException {
        com.squareup.okhttp.Call call = getDealerHistoricalInventoryValidateBeforeCall(dealerId, null, null);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dealer&#39;s historical inventory (asynchronously)
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerHistoricalInventoryAsync(String dealerId, final ApiCallback<BaseListing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerHistoricalInventoryValidateBeforeCall(dealerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseListing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDealerLandingPage
     * @param dealerId Robot id to get the landing page html for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerLandingPageCall(String dealerId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}/landing"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerLandingPageValidateBeforeCall(String dealerId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealerLandingPage(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerLandingPageCall(dealerId, apiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Experimental: Get cached version of dealer landing page by dealer id
     * Experimental: Get cached version of dealer landing page by dealer id
     * @param dealerId Robot id to get the landing page html for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return DealerLandingPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DealerLandingPage getDealerLandingPage(String dealerId, String apiKey) throws ApiException {
        ApiResponse<DealerLandingPage> resp = getDealerLandingPageWithHttpInfo(dealerId, apiKey);
        return resp.getData();
    }

    /**
     * Experimental: Get cached version of dealer landing page by dealer id
     * Experimental: Get cached version of dealer landing page by dealer id
     * @param dealerId Robot id to get the landing page html for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @return ApiResponse&lt;DealerLandingPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DealerLandingPage> getDealerLandingPageWithHttpInfo(String dealerId, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = getDealerLandingPageValidateBeforeCall(dealerId, apiKey, null, null);
        Type localVarReturnType = new TypeToken<DealerLandingPage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Experimental: Get cached version of dealer landing page by dealer id (asynchronously)
     * Experimental: Get cached version of dealer landing page by dealer id
     * @param dealerId Robot id to get the landing page html for (required)
     * @param apiKey The API Authentication Key. Mandatory with all API calls. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerLandingPageAsync(String dealerId, String apiKey, final ApiCallback<DealerLandingPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerLandingPageValidateBeforeCall(dealerId, apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DealerLandingPage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDealerRatings
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerRatingsCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}/ratings"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerRatingsValidateBeforeCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealerRatings(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerRatingsCall(dealerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dealer&#39;s Rating
     * [MOCK] Get a dealer&#39;s Rating
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @return DealerRating
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DealerRating getDealerRatings(String dealerId) throws ApiException {
        ApiResponse<DealerRating> resp = getDealerRatingsWithHttpInfo(dealerId);
        return resp.getData();
    }

    /**
     * Dealer&#39;s Rating
     * [MOCK] Get a dealer&#39;s Rating
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @return ApiResponse&lt;DealerRating&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DealerRating> getDealerRatingsWithHttpInfo(String dealerId) throws ApiException {
        com.squareup.okhttp.Call call = getDealerRatingsValidateBeforeCall(dealerId, null, null);
        Type localVarReturnType = new TypeToken<DealerRating>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dealer&#39;s Rating (asynchronously)
     * [MOCK] Get a dealer&#39;s Rating
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerRatingsAsync(String dealerId, final ApiCallback<DealerRating> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerRatingsValidateBeforeCall(dealerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DealerRating>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDealerReviews
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDealerReviewsCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dealer/{dealer_id}/reviews"
            .replaceAll("\\{" + "dealer_id" + "\\}", apiClient.escapeString(dealerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDealerReviewsValidateBeforeCall(String dealerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dealerId' is set
        if (dealerId == null) {
            throw new ApiException("Missing the required parameter 'dealerId' when calling getDealerReviews(Async)");
        }
        

        com.squareup.okhttp.Call call = getDealerReviewsCall(dealerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dealer&#39;s Review
     * [MOCK] Get a dealer&#39;s Review
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @return DealerReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DealerReview getDealerReviews(String dealerId) throws ApiException {
        ApiResponse<DealerReview> resp = getDealerReviewsWithHttpInfo(dealerId);
        return resp.getData();
    }

    /**
     * Dealer&#39;s Review
     * [MOCK] Get a dealer&#39;s Review
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @return ApiResponse&lt;DealerReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DealerReview> getDealerReviewsWithHttpInfo(String dealerId) throws ApiException {
        com.squareup.okhttp.Call call = getDealerReviewsValidateBeforeCall(dealerId, null, null);
        Type localVarReturnType = new TypeToken<DealerReview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dealer&#39;s Review (asynchronously)
     * [MOCK] Get a dealer&#39;s Review
     * @param dealerId Id representing the dealer to fetch the ratings for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDealerReviewsAsync(String dealerId, final ApiCallback<DealerReview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDealerReviewsValidateBeforeCall(dealerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DealerReview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
